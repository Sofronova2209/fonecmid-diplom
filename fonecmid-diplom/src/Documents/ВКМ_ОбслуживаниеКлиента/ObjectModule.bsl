
Процедура ПередЗаписью(Отказ,РежимЗаписи, РежимПроведения)
	
	// Проверка на обмен данными
    Если ОбменДанными.Загрузка Тогда
        Возврат;
    КонецЕсли;
	
    // Сохраняем текущие значения полей до записи, если документ не новый
    Если Не ЭтоНовый() Тогда
        //На сервере
        ОбъектДоЗаписи = ПолучитьОбъектДоЗаписи(Ссылка);
    КонецЕсли;

    // Если документ новый,  то формируем сообщение и записываем его в справочник
    Если ЭтоНовый() Тогда

        // Формируем сообщение при первом проведении документа
        ТекстСообщения = "Уважаемый клиент!" + Символы.ПС +
            "Информируем Вас, что по Вашему заказу назначена дата проведения работ: " + Формат(Дата, "ДФ=dd.MM.yyyy") + Символы.ПС +
            "Время начала работ: " + Формат(ВремяНачалаРаботПлан, "ДФ=ЧЧ:мм") + Символы.ПС +
            "С Вами будет работать специалист: " + Специалист;

        // Добавляем сообщение в справочник
        ДобавитьСообщениеВТГ(ТекстСообщения);

    Иначе

        // Проверяем, изменилась ли дата
        Если ОбъектДоЗаписи.ДатаПроведенияРабот <> ДатаПроведенияРабот Тогда

            // Формируем сообщение об изменении даты
            ТекстСообщения = "Уважаемый клиент!" + Символы.ПС +
                "По Вашему заказу изменена дата на: " + Формат(Дата, "ДФ=dd.MM.yyyy")+ Символы.ПС +
            "Время начала работ: " + Формат(ВремяНачалаРаботПлан, "ДФ=ЧЧ:мм");

            // Добавляем сообщение в справочник
            ДобавитьСообщениеВТГ(ТекстСообщения);

        КонецЕсли;
        
         // Проверяем, изменилась ли время
        Если ОбъектДоЗаписи.ВремяНачалаРаботПлан <> ВремяНачалаРаботПлан Тогда

            // Формируем сообщение об изменении даты
            ТекстСообщения = "Уважаемый клиент!" + Символы.ПС +
                "По Вашему заказу изменено время на: " + Формат(ВремяНачалаРаботПлан, "ДФ=ЧЧ:мм")+ Символы.ПС + "Дата на: " + Формат(Дата, "ДФ=dd.MM.yyyy");

            // Добавляем сообщение в справочник
            ДобавитьСообщениеВТГ(ТекстСообщения);

        КонецЕсли;

        // Проверяем, изменился ли специалист
        Если ОбъектДоЗаписи.Специалист <> Специалист Тогда

            // Формируем сообщение об изменении специалиста
            ТекстСообщения = "Уважаемый клиент!" + Символы.ПС +
                "По Вашему заказу изменен специалист на: " + Специалист;

            // Добавляем сообщение в справочник
            ДобавитьСообщениеВТГ(ТекстСообщения);

        КонецЕсли;

    КонецЕсли;
КонецПроцедуры

// ---------------------------------------------------------------------------------------
// Функция "ПолучитьОбъектДоЗаписи"
// Получает объект документа по ссылке на сервере.
// ---------------------------------------------------------------------------------------
// Параметры:
//  Ссылка - Ссылка на документ.
//
// Возвращаемое значение:
//  Объект документа.
//

Функция ПолучитьОбъектДоЗаписи(Ссылка) Экспорт

    Возврат Ссылка.ПолучитьОбъект();

КонецФункции


Процедура ОбработкаПроведения(Отказ, РежимПроведения)

    // Получаем договор из документа.  Предполагается, что в документе есть реквизит "Договор"
    Договор = Договор;

    // Проверяем, что договор заполнен
    Если Договор.Пустая() Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Не указан договор!";
        Сообщение.Поле = "Договор"; 
        Сообщение.Сообщить();
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Читаем объект договора.  Важно перечитать, чтобы получить значения доп. реквизитов.
    //@skip-check reading-attribute-from-database
    ДоговорОбъект = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Договор.Наименование);

    // Проверяем на существование Договора, на всякий случай

    Если ДоговорОбъект = неопределено Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Договор не найден!";
        Сообщение.Поле = "Договор"; 
        Сообщение.Сообщить();
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Предварительно проверяем, что это договор абонентского обслуживания.
    Если ДоговорОбъект.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
        Возврат; // Если это не абонентский договор, проверку дат не выполняем. Выходим из процедуры, если это не нужный тип договора
    КонецЕсли;

    // Получаем даты начала и окончания из дополнительных реквизитов договора
    ДатаНачалаДействия = ДоговорОбъект.ВКМ_ДатаНачалаДействияДоговора; // Замените на фактическое имя доп. реквизита
    ДатаОкончанияДействия = ДоговорОбъект.ВКМ_ДатаОкончанияДействияДогвора; // Замените на фактическое имя доп. реквизита

    // Проверяем, что даты начала и окончания заполнены (не пустые)
    Если ДатаНачалаДействия = Дата(1,1,1) ИЛИ ДатаОкончанияДействия = Дата(1,1,1)  Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "У абонентского договора не указаны дата начала или дата окончания действия!";
        Сообщение.Поле = "Договор"; 
        Сообщение.Сообщить();
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверяем, что дата документа попадает в период действия договора
    Если Дата < ДатаНачалаДействия ИЛИ Дата > ДатаОкончанияДействия Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Дата документа (" + Формат(Дата, "ДФ=dd.MM.yyyy") + ") находится за пределами действия договора (" + Формат(ДатаНачалаДействия, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаОкончанияДействия, "ДФ=dd.MM.yyyy") + ")!";
        Сообщение.Поле = "Дата"; 
        Сообщение.Сообщить();
        Отказ = Истина;
    КонецЕсли;
    
     // **** Начало кода для Регистра накопления ВКМ_ВыполненныеКлиентуРаботы ****

    // Получение ставки часа из доп. реквизита договора
    СтавкаЧаса = ДоговорОбъект.ВКМ_СтоимостьЧасасРаботыСпециалиста; 

    // Если ставка часа не указана или равна 0, то суммарное количество работ будет 0
    // (согласно требованию "не нагружать сообщениями")
    Если СтавкаЧаса = 0 Тогда
    	Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Ставка часа равна нулю";
        Сообщение.Сообщить();
        Возврат; 
    КонецЕсли;
    
    ТаблицаДляПроведения = ВыполненныеРаботы.Выгрузить();

    //  Обходим строки табличной части ВыполненныеРаботы
    Для Каждого СтрокаТЧ Из ТаблицаДляПроведения Цикл

        // Проверяем, что часы к оплате клиенту указаны
        Если СтрокаТЧ.ЧасыКОплатеКлиенту > 0 Тогда

            Клиент = Клиент;

            // Расчет суммы к оплате
            СуммаКОплате = СтрокаТЧ.ЧасыКОплатеКлиенту * СтавкаЧаса;

            // Формирование движения по регистру
            Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
            Движение.Период = Дата;
            Движение.Регистратор = Ссылка;
            Движение.Клиент = Клиент;
            Движение.Договор = Договор;
            Движение.КоличествоЧасов = СтрокаТЧ.ЧасыКОплатеКлиенту;
            Движение.СуммаКОплате = СуммаКОплате;
        КонецЕсли;
        
        Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;

    КонецЦикла;

    // **** Конец кода для Регистра накопления ВКМ_ВыполненныеКлиентуРаботы ****

КонецПроцедуры

// ---------------------------------------------------------------------------------------
// Процедура "ДобавитьСообщениеВТГ"
// Добавляет сообщение в справочник "ВКМ_УведомленияТБоту".
// ---------------------------------------------------------------------------------------
// Параметры:
//  ТекстСообщения - Строка - Текст сообщения для добавления в справочник.
//
Процедура ДобавитьСообщениеВТГ(ТекстСообщения)

    // Создаем новый элемент справочника
    НовыйЭлемент = Справочники.ВКМ_УведомленияТБоту.СоздатьЭлемент();
    НовыйЭлемент.ТекстСообщения = ТекстСообщения;

    // Пытаемся записать элемент справочника
    Попытка
        НовыйЭлемент.Записать();
    Исключение
        // Обрабатываем ошибку записи элемента справочника
        Сообщить("Ошибка при записи сообщения в справочник ВКМ_УведомленияТБоту: " + ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры